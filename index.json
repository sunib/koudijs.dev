[{"content":"Let\u0026rsquo;s say you just wanted to have a simple API-key for your nginx ingress. The if structures in nginx configs are an interesting way to do this. There might be more effecient ways to do this, but for now this will do.\nExample example-ingress.yaml:\napiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: some-ingress annotations: nginx.ingress.kubernetes.io/use-regex: \u0026#34;true\u0026#34; nginx.ingress.kubernetes.io/configuration-snippet: |if ($arg_api_key != \u0026#39;yourVerySecretKey\u0026#39;) { return 401 \u0026#39;Access denied!\u0026#39;; } if ($http_x_api_key != \u0026#39;yourVerySecretKey\u0026#39;) { return 401 \u0026#39;Access denied!\u0026#39;; } spec: ingressClassName: nginx tls: - hosts: - koudijs.dev secretName: tls-koudijs-dev rules: - host: koudijs.dev http: paths: - path: / pathType: Prefix backend: service: name: some-backend-service port: number: 80 Running it can off course be done by:\nkubectl apply -f example-ingress.yaml How does it work? The trick here is the nginx.ingress.kubernetes.io/configuration-snippet annotation. All ingresses are transformed into one big Nginx config file. It\u0026rsquo;s templated, and after some digging I found the actual place in the nginx proxy repo.\nWarning Please be warned that injecting other kinds of stuff could lead to dangerous situations. Please be aware that you - or some sysadmin - could configure allow-snippet-annotations: \u0026quot;false\u0026quot;, which might be wise. But it would also break the trick described in this blog!\n","permalink":"https://koudijs.dev/posts/ingress-api-key/","summary":"Let\u0026rsquo;s say you just wanted to have a simple API-key for your nginx ingress. The if structures in nginx configs are an interesting way to do this. There might be more effecient ways to do this, but for now this will do.\nExample example-ingress.yaml:\napiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: some-ingress annotations: nginx.ingress.kubernetes.io/use-regex: \u0026#34;true\u0026#34; nginx.ingress.kubernetes.io/configuration-snippet: |if ($arg_api_key != \u0026#39;yourVerySecretKey\u0026#39;) { return 401 \u0026#39;Access denied!\u0026#39;; } if ($http_x_api_key != \u0026#39;yourVerySecretKey\u0026#39;) { return 401 \u0026#39;Access denied!","title":"Ingress API key"},{"content":"On this docker hub page you can find all functions containers. This will allow you to run your Azure Functions inside kubernetes.\nBut how do you set this up? What things are not included?\nFunctions in Azure itself Azure functions make it very easy to run your pieces of code in Azure.\nAs I currently see it: Microsoft divided \u0026lsquo;core\u0026rsquo; functions from hosting functions. The GUI inside Azure allows you to:\n Allows you to swap between different slots (but that switching actually causes short downtimes on your site, good topic for another blog) Use secrets from a keyvault in your application settings Host your function with custom domains Use keys to protect your HTTP functions with an api key  App keys protect all HTTP functions Function keys protect specific HTTP functions Functions use an attribute (HttpTrigger(AuthorizationLevel.Anonymous)) to define which exact access right they need (could be anonymous)    Support for keys Where the last function actuall is supported in the container as partly supported:\n https://github.com/Azure/azure-functions-host/issues/4147#issuecomment-477431016 https://martinbjorkstrom.com/posts/2020-02-12-testing-protected-azure-functions). https://docs.microsoft.com/en-us/azure/azure-functions/security-concepts#secret-repositories  But the question is: do you want it. Having calls between functions secured with keys is actually tedious work if you have multiple functions that call each other. You can also just secure the outside-in traffic by putting a key on your ingress.\n","permalink":"https://koudijs.dev/posts/azure-function-auth-in-k8s/","summary":"On this docker hub page you can find all functions containers. This will allow you to run your Azure Functions inside kubernetes.\nBut how do you set this up? What things are not included?\nFunctions in Azure itself Azure functions make it very easy to run your pieces of code in Azure.\nAs I currently see it: Microsoft divided \u0026lsquo;core\u0026rsquo; functions from hosting functions. The GUI inside Azure allows you to:","title":"Azure functions auth in k8s"},{"content":"Welkom op simons blog 42 Kijk eens aan\nYou can use the editor on GitHub to maintain and preview the content for your website in Markdown files.\nWhenever you commit to this repository, GitHub Pages will run Jekyll to rebuild the pages in your site, from the content in your Markdown files.\nMarkdown Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for\nSyntax highlighted code block # Header 1 ## Header 2 ### Header 3  - Bulleted - List 1. Numbered 2. List **Bold** and _Italic_ and `Code` text [Link](url) and ![Image](src) For more details see Basic writing and formatting syntax.\nJust play arround etc ","permalink":"https://koudijs.dev/about/","summary":"Welkom op simons blog 42 Kijk eens aan\nYou can use the editor on GitHub to maintain and preview the content for your website in Markdown files.\nWhenever you commit to this repository, GitHub Pages will run Jekyll to rebuild the pages in your site, from the content in your Markdown files.\nMarkdown Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for\nSyntax highlighted code block # Header 1 ## Header 2 ### Header 3  - Bulleted - List 1.","title":"About"}]